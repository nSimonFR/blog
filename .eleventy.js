const { DateTime } = require("luxon");
const readingTime = require("eleventy-plugin-reading-time");
const pluginRss = require("@11ty/eleventy-plugin-rss");
const syntaxHighlight = require("@11ty/eleventy-plugin-syntaxhighlight");
const eleventyPluginCookLang = require("./plugins/cooklang.js");
const fs = require("fs");
const path = require("path");
const { execSync } = require("child_process");

const isDev = process.env.ELEVENTY_ENV === "development";
const isProd = process.env.ELEVENTY_ENV === "production";

const manifestPath = path.resolve(
  __dirname,
  "public",
  "assets",
  "manifest.json"
);

const manifest = isDev
  ? {
      "main.js": "/assets/main.js",
      "main.css": "/assets/main.css",
    }
  : JSON.parse(fs.readFileSync(manifestPath, { encoding: "utf8" }));

// Global helpers for computing created dates
let attemptedUnshallow = false;
function ensureFullGitHistory() {
  if (attemptedUnshallow) return;
  attemptedUnshallow = true;
  try {
    const isRepo = execSync("git rev-parse --is-inside-work-tree", {
      encoding: "utf-8",
    })
      .toString()
      .trim();
    if (isRepo === "true") {
      const isShallow = execSync("git rev-parse --is-shallow-repository", {
        encoding: "utf-8",
      })
        .toString()
        .trim();
      if (isShallow === "true") {
        try {
          execSync("git fetch --unshallow --tags --prune", { stdio: "ignore" });
        } catch {}
      }
    }
  } catch {}
}

function getGitCreatedIsoForFile(inputPath) {
  try {
    const iso = execSync(
      `git log --diff-filter=A --follow --format=%aI -1 -- ${JSON.stringify(
        inputPath
      )}`,
      { encoding: "utf-8" }
    )
      .toString()
      .trim();
    return iso || null;
  } catch (e) {
    return null;
  }
}

module.exports = function (eleventyConfig) {
  eleventyConfig.addPlugin(readingTime);
  eleventyConfig.addPlugin(pluginRss);
  eleventyConfig.addPlugin(syntaxHighlight);
  eleventyConfig.addPlugin(eleventyPluginCookLang, { outputHtml: true });

  // setup mermaid markdown highlighter
  const highlighter = eleventyConfig.markdownHighlighter;
  eleventyConfig.addMarkdownHighlighter((str, language) => {
    if (language === "mermaid") {
      return `<pre class="mermaid">${str}</pre>`;
    }
    return highlighter(str, language);
  });

  eleventyConfig.setDataDeepMerge(true);

  // Global computed data: unify date computation for all content
  eleventyConfig.addGlobalData("eleventyComputed", {
    date: (data) => {
      if (data.date) return data.date;

      const inputPath = data?.page?.inputPath;
      if (!inputPath) return data.page?.date;

      // 0) Try precomputed map if present (generated by scripts/generate-file-dates.js)
      try {
        const mapPath = path.join(__dirname, "src", "data", "fileDates.json");
        if (fs.existsSync(mapPath)) {
          const map = JSON.parse(fs.readFileSync(mapPath, "utf-8"));
          const iso =
            map[inputPath] ||
            map[inputPath.replace(/^\.\//, "")] ||
            map[path.resolve(inputPath)];
          if (iso) return new Date(iso);
        }
      } catch {}

      // 1) Try Git first commit date
      ensureFullGitHistory();
      const gitIso = getGitCreatedIsoForFile(inputPath);
      if (gitIso) return new Date(gitIso);

      // 2) Fallback to filesystem birthtime/mtime
      try {
        const stat = fs.statSync(inputPath);
        return stat.birthtimeMs
          ? new Date(stat.birthtimeMs)
          : new Date(stat.mtimeMs);
      } catch (e) {
        // 3) Final fallback to Eleventy default
        return data.page?.date;
      }
    },
  });

  eleventyConfig.addPassthroughCopy({ "src/images": "images" });

  // Copy recipe images (jpg, jpeg, png) from recipe directories
  eleventyConfig.addPassthroughCopy("src/posts/recipes/**/*.jpg");
  eleventyConfig.addPassthroughCopy("src/posts/recipes/**/*.jpeg");
  eleventyConfig.addPassthroughCopy("src/posts/recipes/**/*.png");

  // Copy .cook files so they can be downloaded
  eleventyConfig.addPassthroughCopy("src/posts/recipes/**/*.cook");

  eleventyConfig.setBrowserSyncConfig({ files: [manifestPath] });

  eleventyConfig.addShortcode("bundledcss", function () {
    return manifest["main.css"]
      ? `<link href="${manifest["main.css"]}" rel="stylesheet" />`
      : "";
  });

  eleventyConfig.addShortcode("bundledjs", function () {
    return manifest["main.js"]
      ? `<script src="${manifest["main.js"]}"></script>`
      : "";
  });

  eleventyConfig.addFilter("excerpt", (post) => {
    // This regex removes all HTML tags from the post content by matching anything between '<' and '>'
    const content = post.replace(/(<([^>]+)>)/gi, "");
    return content.substr(0, content.lastIndexOf(" ", 150)) + "...";
  });

  eleventyConfig.addFilter("readableDate", (dateObj) => {
    return DateTime.fromJSDate(dateObj, { zone: "utc" }).toFormat(
      "dd LLL yyyy"
    );
  });

  eleventyConfig.addFilter("htmlDateString", (dateObj) => {
    return DateTime.fromJSDate(dateObj, { zone: "utc" }).toFormat("yyyy-LL-dd");
  });

  eleventyConfig.addFilter("dateToIso", (dateString) => {
    return new Date(dateString).toISOString();
  });

  eleventyConfig.addFilter("head", (array, n) => {
    if (n < 0) {
      return array.slice(n);
    }

    return array.slice(0, n);
  });

  eleventyConfig.addCollection("tagList", function (collection) {
    let tagSet = new Set();
    collection.getAll().forEach(function (item) {
      if ("tags" in item.data) {
        let tags = item.data.tags;

        tags = tags.filter(function (item) {
          switch (item) {
            case "all":
            case "nav":
            case "post":
            case "posts":
              return false;
          }

          return true;
        });

        for (const tag of tags) {
          tagSet.add(tag);
        }
      }
    });

    return [...tagSet];
  });

  eleventyConfig.addFilter("pageTags", (tags) => {
    const generalTags = ["all", "nav", "post", "posts"];

    return tags
      .toString()
      .split(",")
      .filter((tag) => {
        return !generalTags.includes(tag);
      });
  });

  eleventyConfig.addFilter("encodeSpaces", function (url) {
    if (!url) return url;
    return url.replace(/ /g, "%20");
  });

  return {
    dir: {
      input: "src",
      output: "public",
      includes: "includes",
      data: "data",
      layouts: "layouts",
    },
    passthroughFileCopy: true,
    templateFormats: ["html", "njk", "md"],
    htmlTemplateEngine: "njk",
    markdownTemplateEngine: "njk",
  };
};
